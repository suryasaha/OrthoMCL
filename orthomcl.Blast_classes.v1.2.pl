#!/usr/bin/perl -w
# PPath@Cornell
# Surya Saha Oct 11, 2010

use strict;
use warnings;
use Getopt::Long;
use List::Compare;
use POSIX;
eval {
	require Bio::DB::Fasta;
};
use Bio::DB::Fasta;

=head1 NAME

 orthomcl.Blast_classes.v1.2.pl - prepare GFF files for different hit classes and verify core hits 

=head1 SYNOPSIS

  % orthomcl.Blast_classes.v1.2.pl --xls blast.xls --mxls multi.blast.xls --groups groups.txt --prot file.faa --gff file.gff --title omcl1.run --src Pvirid
  
=head1 DESCRIPTION

 Reads in Excel files generated by Blastreport. Did not output files for SRC proteins that 
 had weak hits besides strong hits and the proteins that had multiple strong hits to 1 
 genome. For each SRC protein, it generates GFF+FASTA files for the following categories
     Core (core and core_paralogous)
     Shared (shared/shared_paralogous)
     Mixed (lineage_specific/_paralogous, hits to both core/shared and missing)
     Weak hits (all hits below blast eval cutoff)
     No hits
 
=head1 VERSION HISTORY
 Version   1.0  INPUT: XLS blast reports, Query <SRC> proteins, Protein GFF, Groups file 
                OUTPUT: GFF+FASTA files for each class
 Version   1.1  INPUT: XLS blast reports, Query <SRC> proteins, Protein GFF, Groups file, nof genomes 
                OUTPUT: GFF+FASTA files for each class (NON-OVERLAPPING WEAKHITS)
 Version   1.2  INPUT: XLS blast reports, Query <SRC> proteins, Protein GFF, Groups file, nof genomes, SRC name 
                OUTPUT: GFF+FASTA files for each class (NON-OVERLAPPING WEAKHITS)
                
                                    
=head1 COMMAND-LINE OPTIONS

 Command-line options can be abbreviated to single-letter options, e.g. -f instead of --file. Some options
are mandatory (see below).

   --xls    <.xls>    Blast report XLS file with top hits in each genome (required)
   --mxls   <.xls>    Blast report XLS file with multiple, weak and no hits (required)
   --prot   <.fna>    Query protein file in FASTA format (required)
   --gff    <.gff>    Query Refseq GFF file (required)
   --title  <name>    title for the output files
   --src    <text>    Abbv for source organism (required)
   --orgs   <INT>     Number of organisms/genomes (required)
      
=head1 AUTHOR

 Surya Saha, ss2489@cornell.edu

=cut

sub mk_id {
	if ($_[0] =~ /^>gi\|(\d+)/) {return $1;}
	else {return;}
}

sub get_class{
	my ($i,@temp,%ctrs,$orgs);
	$ctrs{'Core'}=0; $ctrs{'Shared'}=0; #$ctrs{'Mixed'}=0;
	@temp=split("\t",$_[0]);
	for($i=0;$i<@temp;$i++){#parses thru group name too, but thats not problematic 
		if ($i%2==0){#class in 2,4...16 positions
			if ($temp[$i]=~ /core/){$ctrs{'Core'}++;}
			elsif($temp[$i]=~ /shared/){$ctrs{'Shared'}++;}
			#elsif(($temp[$i]=~ /lineage/) || ($temp[$i] eq '')){$ctrs{'Mixed'}++;}
		}
	}
	#first 2 cols are SRC info, this math does not work since $rec has 19 items, 19th is a empty string??
	#if($ctrs{'Core'}==((scalar(@temp)-2)/2)){return 'Core';}
	#elsif($ctrs{'Shared'}==((scalar(@temp)-2)/2)){return 'Shared';}
	#else{return 'Mixed';}
	#HARD CODING THE NUMBER OF GENOMES TO 8
	$orgs=$_[1];
	if($ctrs{'Core'}==$orgs){return 'Core';}
	elsif($ctrs{'Shared'}==$orgs){return 'Shared';}
	else{return 'Mixed';}
}

my ($xl1,$xl2,$prot,$title,$gff,$orgs,$src);

GetOptions (
	'xls=s' => \$xl1,
	'mxls=s' => \$xl2,
	'prot=s' => \$prot,
	'gff=s' => \$gff,
	'title:s' => \$title,
	'src=s' => \$src,
	'orgs=i' => \$orgs) or (system('pod2text',$0), exit 1);

# defaults and checks
defined($xl1) or (system('pod2text',$0), exit 1);
if (!(-e $xl1)){print STDERR "$xl1 not found: $!\n"; exit 1;}
defined($xl2) or (system('pod2text',$0), exit 1);
if (!(-e $xl2)){print STDERR "$xl2 not found: $!\n"; exit 1;}
defined($prot) or (system('pod2text',$0), exit 1);
if (!(-e $prot)){print STDERR "$prot not found: $!\n"; exit 1;}
defined($gff) or (system('pod2text',$0), exit 1);
if (!(-e $gff)){print STDERR "$gff not found: $!\n"; exit 1;}
$title ||="proteinclasses";
defined($src) or (system('pod2text',$0), exit 1);
defined($orgs) or (system('pod2text',$0), exit 1);

unless(open(XL1,"<$xl1")){print "not able to open $xl1\n\n";exit 1;}
unless(open(XL2,"<$xl2")){print "not able to open $xl2\n\n";exit 1;}
unless(open(GFF,"<$gff")){print "not able to open $gff\n\n";exit 1;}

my ($i,$j,$k,$rec,@temp,@temp1,$faadb,%gff,@gi,%temp_hash,%ctrs);

#NC_012985.2	RefSeq	CDS	36	404	.	+	0	locus_tag=CLIBASIA_00005;transl_table=11;
#product=hypothetical protein;protein_id=YP_003064535.1;
#db_xref=GI:254780122;db_xref=GeneID:8210255;exon_number=1
while($rec=<GFF>){
	if($rec =~ /#/){next;} 
	@temp=split("\t",$rec);
	if($temp[2] eq 'CDS'){
		@temp1=split(/\;/,$temp[8]);
		foreach $i (@temp1){
			if ($i=~ /^db_xref\=GI/){
				$i=~ s/^db_xref\=GI\://; chomp $i; $gff{$i}=$rec;
			}
		}
	}
}
close (GFF);

$faadb = Bio::DB::Fasta->new($prot, '-makeid'=>\&mk_id, '-reindex'=>1);
if(!($faadb)){ die "These was a problem creating database from $prot\n";}

#initing ctrs
$ctrs{'Core'}=0;
$ctrs{'Weak'}=0;
$ctrs{'No hit'}=0;
$ctrs{'Mixed'}=0;
$ctrs{'Shared'}=0;

#printing faa and gff for weak hits
while($rec=<XL2>){
	if($rec=~ /$src proteins with only weak hits/){last;}
}
for(1..3){$rec=<XL2>;}
while($rec ne "\n"){
	@temp=split("\t",$rec);
#	push @gi,$temp[0];
	if (!exists $temp_hash{$temp[0]}){$temp_hash{$temp[0]}='';}
	$rec=<XL2>;
}
#uniqfying the list of GI's of proteins with weak hits
@gi= keys %temp_hash;
unless(open(OGFF,">weakhits\.$gff")){print "not able to open weakhits\.$gff\n\n";exit 1;}
unless(open(OPROT,">weakhits\.$prot")){print "not able to open weakhits\.$prot\n\n";exit 1;}
print OGFF "##gff-version 3\n#Source: NCBI Refseq GFF file\n#CDS for proteins with weak hits to pan-proteome\n";
foreach $i (@gi){
		if(!($faadb->header($i))){ print STDERR "could not find $i in $prot\n\n"; exit 1;}
		print OPROT '>',$faadb->header($i),"\n";
		print OPROT $faadb->seq($i),"\n";
		print OGFF $gff{$i};
}
close(OPROT);
close(OGFF);
$ctrs{'Weak'}=scalar @gi; @gi=();

#printing faa and gff for no hits
for(1..3){$rec=<XL2>;}
while($rec=<XL2>){
	if($rec eq "\n"){ last;}#exit loop before getting to group list
	@temp=split("\t",$rec);
	push @gi,$temp[0];
}
$ctrs{'No hit'}=scalar @gi;
close(XL2);
unless(open(OGFF,">nohits\.$gff")){print "not able to open nohits\.$gff\n\n";exit 1;}
unless(open(OPROT,">nohits\.$prot")){print "not able to open nohits\.$prot\n\n";exit 1;}
print OGFF "##gff-version 3\n#Source: NCBI Refseq GFF file\n#CDS for proteins with no hits to pan-proteome\n";
foreach $i (@gi){
		if(!($faadb->header($i))){ print STDERR "could not find $i in $prot\n\n"; exit 1;}
		print OPROT '>',$faadb->header($i),"\n";
		print OPROT $faadb->seq($i),"\n";
		print OGFF $gff{$i};
}
close(OPROT);
close(OGFF);

#printing faa and gff for Core, Shared and Mixed hits
for(1..5){$rec=<XL1>;}
unless(open(OCGFF,">core\.$gff")){print "not able to open core\.$gff\n\n";exit 1;}
unless(open(OCPROT,">core\.$prot")){print "not able to open core\.$prot\n\n";exit 1;}
unless(open(OSGFF,">shared\.$gff")){print "not able to open shared\.$gff\n\n";exit 1;}
unless(open(OSPROT,">shared\.$prot")){print "not able to open shared\.$prot\n\n";exit 1;}
unless(open(OMGFF,">mixed\.$gff")){print "not able to open mixed\.$gff\n\n";exit 1;}
unless(open(OMPROT,">mixed\.$prot")){print "not able to open mixed\.$prot\n\n";exit 1;}
print OCGFF "##gff-version 3\n#Source: NCBI Refseq GFF file\n#CDS for proteins similar to core and core paralogous\n";
print OSGFF "##gff-version 3\n#Source: NCBI Refseq GFF file\n#CDS for proteins similar to shared and shared paralogous\n";
print OMGFF "##gff-version 3\n#Source: NCBI Refseq GFF file\n#CDS for proteins similar to lineage/lineage paralogous and with no hits in some genomes\n";
while($rec=<XL1>){
	@temp=split("\t",$rec);
	#print STDERR "Processing GI:$temp[0]\n";
	if(&get_class($rec,$orgs) eq 'Core'){
		if(!($faadb->header($temp[0]))){ print STDERR "could not find $temp[0] in $prot\n\n"; exit 1;}
		print OCPROT '>',$faadb->header($temp[0]),"\n"; print OCPROT $faadb->seq($temp[0]),"\n";
		if (!exists $gff{$temp[0]}){print STDERR "$temp[0] core not found in $gff\n";} else {print OCGFF $gff{$temp[0]};}
		$ctrs{'Core'}++;
	}
	elsif(&get_class($rec,$orgs) eq 'Shared'){
		if(!($faadb->header($temp[0]))){ print STDERR "could not find $temp[0] in $prot\n\n"; exit 1;}
		print OSPROT '>',$faadb->header($temp[0]),"\n"; print OSPROT $faadb->seq($temp[0]),"\n";
		if (!exists $gff{$temp[0]}){print STDERR "$temp[0] shared not found in $gff\n";} else {print OSGFF $gff{$temp[0]};}
		$ctrs{'Shared'}++;
	}
	elsif(&get_class($rec,$orgs) eq 'Mixed'){
		if(!($faadb->header($temp[0]))){ print STDERR "could not find $temp[0] in $prot\n\n"; exit 1;}
		print OMPROT '>',$faadb->header($temp[0]),"\n"; print OMPROT $faadb->seq($temp[0]),"\n";
		if (!exists $gff{$temp[0]}){print STDERR "$temp[0] mixed not found in $gff\n";} else {print OMGFF $gff{$temp[0]};}
		$ctrs{'Mixed'}++;
	}
}
close(XL1);
close(OCPROT);
close(OCGFF);
close(OSPROT);
close(OSGFF);
close(OMPROT);
close(OMGFF);

while (($i,$j) = each %ctrs){
	print STDERR "Number of $i proteins: $j\n";
}
exit;